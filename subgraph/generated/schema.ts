// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class StakeLP extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeLP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StakeLP must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StakeLP", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StakeLP | null {
    return changetype<StakeLP | null>(
      store.get_in_block("StakeLP", id.toHexString()),
    );
  }

  static load(id: Bytes): StakeLP | null {
    return changetype<StakeLP | null>(store.get("StakeLP", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get startingAmount(): BigInt {
    let value = this.get("startingAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startingAmount(value: BigInt) {
    this.set("startingAmount", Value.fromBigInt(value));
  }

  get artMetisAmount(): BigInt {
    let value = this.get("artMetisAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set artMetisAmount(value: BigInt) {
    this.set("artMetisAmount", Value.fromBigInt(value));
  }

  get metisAmount(): BigInt {
    let value = this.get("metisAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set metisAmount(value: BigInt) {
    this.set("metisAmount", Value.fromBigInt(value));
  }

  get lpTokenAmount(): BigInt {
    let value = this.get("lpTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lpTokenAmount(value: BigInt) {
    this.set("lpTokenAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Participant extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Participant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Participant must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Participant", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Participant | null {
    return changetype<Participant | null>(
      store.get_in_block("Participant", id.toHexString()),
    );
  }

  static load(id: Bytes): Participant | null {
    return changetype<Participant | null>(
      store.get("Participant", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get totalMetisUsed(): BigInt {
    let value = this.get("totalMetisUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMetisUsed(value: BigInt) {
    this.set("totalMetisUsed", Value.fromBigInt(value));
  }

  get totalArtMetis(): BigInt {
    let value = this.get("totalArtMetis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalArtMetis(value: BigInt) {
    this.set("totalArtMetis", Value.fromBigInt(value));
  }

  get totalMetisAmount(): BigInt {
    let value = this.get("totalMetisAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalMetisAmount(value: BigInt) {
    this.set("totalMetisAmount", Value.fromBigInt(value));
  }

  get totalLpTokenAmount(): BigInt {
    let value = this.get("totalLpTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLpTokenAmount(value: BigInt) {
    this.set("totalLpTokenAmount", Value.fromBigInt(value));
  }

  get totalTransactions(): BigInt {
    let value = this.get("totalTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTransactions(value: BigInt) {
    this.set("totalTransactions", Value.fromBigInt(value));
  }

  get firstBlockNumber(): BigInt {
    let value = this.get("firstBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstBlockNumber(value: BigInt) {
    this.set("firstBlockNumber", Value.fromBigInt(value));
  }

  get lastBlockNumber(): BigInt {
    let value = this.get("lastBlockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastBlockNumber(value: BigInt) {
    this.set("lastBlockNumber", Value.fromBigInt(value));
  }
}
